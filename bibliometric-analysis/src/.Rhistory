install.package("devtools")
install.package("devtools")
install.package("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("devtools")
require(devtools)
devtools::install_github("swarm-lab/ROpenCVLite")
devtools::install_github("swarm-lab/ROpenCVLite")
source('~/.active-rstudio-document')
layer = c(1 2 3, 3 4 2)
layer = c(1, 2, 3; 3, 4, 2)
layer = c(1, 2, 3 3, 4, 2)
layer = c(1, 2, 3, 3, 4, 2)
layer = cbind(c(1,2,3),c(2,3,4))
View(layer)
layer.size()
layer.size
size(layer)
length(layer)
library(bibliometrix)
D <- readLines("scopus.bib")
M <- convert2df(D, dbsource = "scopus", format = "bibtex")
### (grafico) Processar resultados bibliometricos
results <- biblioAnalysis(M, sep = ";")
plot(x = results, k = 10, pause = FALSE)
### (console) Resumo dos resultados
S <- summary(object = results, k = 10, pause = FALSE)
### (console/viewer) Referências (Papers) mais citadas, no conjunto de dados
CR_Papers = citations(M, field = "article", sep = ";")
CR_Papers <- as.data.frame(CR_Papers$Cited[1:10])
names(CR_Papers) <- c('Paper', 'Citations')
CR_Papers
#View(CR_Papers)
CR_Authors = citations(M, field = "author", sep = ";")
CR_Authors <- as.data.frame(CR_Authors$Cited[1:10])
names(CR_Authors) <- c('Author', 'Citations')
CR_Authors
#View(CR_Authors)
# k = 10 registros
DF <- dominance(results, k = 10)
DF
authors = gsub(",", " ", names(results$Authors)[1:10])
indices <- Hindex(M, authors, sep = ";", years=10)
HI <- indices$H
HI
M <- metaTagExtraction(M, Field = "AU_CO", sep = ";")
NetMatrix <- biblioNetwork(M, analysis = "collaboration", network = "countries", sep = ";")
networkPlot(NetMatrix, n = 20, Title = "Country Collaboration", type = "circle", size=TRUE, remove.multiple=FALSE)
# (grafico) Rede de co-ocorrencias de palavras-chave (20 keywords)
NetMatrix <- biblioNetwork(M, analysis = "co-occurrences", network = "keywords", sep = ";")
networkPlot(NetMatrix, n = 20, Title = "Keyword Co-occurrences", type = "kamada", size=T)
library(bibliometrix)
D <- readLines("scopus.bib")
M <- convert2df(D, dbsource = "scopus", format = "bibtex")
### (grafico) Processar resultados bibliometricos
results <- biblioAnalysis(M, sep = ";")
plot(x = results, k = 10, pause = FALSE)
### (console) Resumo dos resultados
S <- summary(object = results, k = 10, pause = FALSE)
### (console/viewer) Referências (Papers) mais citadas, no conjunto de dados
CR_Papers = citations(M, field = "article", sep = ";")
CR_Papers <- as.data.frame(CR_Papers$Cited[1:10])
names(CR_Papers) <- c('Paper', 'Citations')
CR_Papers
#View(CR_Papers)
CR_Authors = citations(M, field = "author", sep = ";")
CR_Authors <- as.data.frame(CR_Authors$Cited[1:10])
names(CR_Authors) <- c('Author', 'Citations')
CR_Authors
#View(CR_Authors)
# k = 10 registros
DF <- dominance(results, k = 10)
DF
authors = gsub(",", " ", names(results$Authors)[1:10])
indices <- Hindex(M, authors, sep = ";", years=10)
HI <- indices$H
HI
M <- metaTagExtraction(M, Field = "AU_CO", sep = ";")
NetMatrix <- biblioNetwork(M, analysis = "collaboration", network = "countries", sep = ";")
networkPlot(NetMatrix, n = 20, Title = "Country Collaboration", type = "circle", size=TRUE, remove.multiple=FALSE)
# (grafico) Rede de co-ocorrencias de palavras-chave (20 keywords)
NetMatrix <- biblioNetwork(M, analysis = "co-occurrences", network = "keywords", sep = ";")
networkPlot(NetMatrix, n = 20, Title = "Keyword Co-occurrences", type = "kamada", size=T)
setwd('/Volumes/Toshiba/Github/data-science/bibliometric-analysis/src/')
library(bibliometrix)
D <- readLines("scopus2.bib")
NetMatrix <- biblioNetwork(M, analysis = "co-occurrences", network = "keywords", sep = ";")
M <- convert2dataframe(D, dbsource = "scopus", format = "bibtex")
convert2dataframe <- function(file, dbsource = "isi", format = "bibtex")
{
if (length(setdiff(dbsource, c("isi", "scopus"))) > 0) {
cat("\n 'dbsource' argument is not properly specified")
cat("\n 'dbsource' argument has to be a character string matching 'isi or 'scopus'.\n")
}
if (length(setdiff(format, c("plaintext", "bibtex"))) > 0) {
cat("\n 'format' argument is not properly specified")
cat("\n 'format' argument has to be a character string matching 'plaintext or 'bibtex'.\n")
}
file = iconv(file, "latin1", "ASCII", sub = "")
switch(dbsource, isi = {
switch(format, bibtex = {
M = isibib2df(file)
}, plaintext = {
M = isi2df(file)
})
}, scopus = {
M = scopus2df(file)
})
M$PY = as.numeric(M$PY)
M$TC = as.numeric(M$TC)
if ("AU" %in% names(M)) {
M$AU = gsub(",", " ", M$AU)
AUlist = strsplit(M$AU, ";")
AU = lapply(AUlist, function(l) {
l = trim(l)
name = strsplit(l, " ")
lastname = unlist(lapply(name, function(ln) {
ln[1]
}))
firstname = lapply(name, function(ln) {
f = paste(substr(ln[-1], 1, 1), collapse = " ")
})
AU = paste(lastname, unlist(firstname), sep = " ",
collapse = ";")
return(AU)
})
M$AU = unlist(AU)
}
return(M)
}
M <- convert2dataframe(D, dbsource = "scopus", format = "bibtex")
convert2dataframe <- function(file, dbsource = "isi", format = "bibtex")
{
if (length(setdiff(dbsource, c("isi", "scopus"))) > 0) {
cat("\n 'dbsource' argument is not properly specified")
cat("\n 'dbsource' argument has to be a character string matching 'isi or 'scopus'.\n")
}
if (length(setdiff(format, c("plaintext", "bibtex"))) > 0) {
cat("\n 'format' argument is not properly specified")
cat("\n 'format' argument has to be a character string matching 'plaintext or 'bibtex'.\n")
}
#file = iconv(file, "latin1", "ASCII", sub = "")
switch(dbsource, isi = {
switch(format, bibtex = {
M = isibib2df(file)
}, plaintext = {
M = isi2df(file)
})
}, scopus = {
M = scopus2df(file)
})
M$PY = as.numeric(M$PY)
M$TC = as.numeric(M$TC)
if ("AU" %in% names(M)) {
M$AU = gsub(",", " ", M$AU)
AUlist = strsplit(M$AU, ";")
AU = lapply(AUlist, function(l) {
l = trim(l)
name = strsplit(l, " ")
lastname = unlist(lapply(name, function(ln) {
ln[1]
}))
firstname = lapply(name, function(ln) {
f = paste(substr(ln[-1], 1, 1), collapse = " ")
})
AU = paste(lastname, unlist(firstname), sep = " ",
collapse = ";")
return(AU)
})
M$AU = unlist(AU)
}
return(M)
}
M <- convert2dataframe(D, dbsource = "scopus", format = "bibtex")
M$AU
results <- biblioAnalysis(M, sep = ";")
#plot(x = results, k = 10, pause = FALSE)
View(results$Authors)
biblioAnalysis
M$AU == "NA"
listAU = strsplit(as.character(M$AU), sep)
sep = ";"
listAU = strsplit(as.character(M$AU), sep)
listAU
listAU[801]
listAU = lapply(listAU, function(l) trim.leading(l))
listAU[801]
listAU = lapply(listAU, function(l) {
l = trim.leading(l)
l = sub(" ", ",", l, fixed = TRUE)
l = sub(",,", ",", l, fixed = TRUE)
l = gsub(" ", "", l, fixed = TRUE)
})
listAU[801]
nAU = unlist(lapply(listAU, length))
fracAU = unlist(sapply(nAU, function(x) {
rep(1/x, x)
}))
nAU
AU = gsub(" ", "", unlist(listAU), fixed = TRUE)
AU
Authors = sort(table(AU), decreasing = TRUE)
Authors
AU
typeof(AU)
table(AU)
getOption("max.print")
options("max.print") = 1000
options(max.print=10000)
table(AU)
as.data.frame(table(AU))
View(as.data.frame(table(AU)))
AU
options(max.print=100000)
AU
AU[1808]
results$Authors
results$Authors[1:2000]
listAU = strsplit(as.character(M$AU), sep)
listAU = lapply(listAU, function(l) trim.leading(l))
M$AU
isibib2df
